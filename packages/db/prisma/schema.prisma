// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())  @db.VarChar(30)
  email             String          @unique
  emailVerified     DateTime?
  name              String?         
  phoneNumber       String?         @unique
  password          String?
  image             String?
  upiId             String?         @unique
  bankName          String?
  accounts          Account[]
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransfer      p2pTransfer[]   @relation(name: "SenderUserRelation")
  receiveTransfer   p2pTransfer[]   @relation(name: "ReceiverUserRelation")
}

model Account {
  id                String          @id @default(cuid())  @db.VarChar(30)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?         @db.Text
  accessToken       String?         @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?         @db.Text
  sessionState      String?
 
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
 
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Merchant {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  name              String?
  auth_type         AuthType   
}

model OnRampTransaction {
  id                Int             @id @default(autoincrement())
  status            OnRampStatus    
  token             String          @unique
  provider          String    
  amount            Int   
  startTime         DateTime    
  userId            String   
  
  user              User            @relation(fields: [userId], references: [id])
}

model Balance {
  id                Int             @id @default(autoincrement())
  userId            String          @unique
  amount            Int       
  locked            Int             //not sure about Locked

  user              User            @relation(fields: [userId], references: [id])
}

model p2pTransfer {
  id                String          @id @default(uuid())
  amount            Int
  timestamp         DateTime
  status            OnRampStatus
  senderUserId      String?
  receiverUserId    String?
  sendUpiId         String?
  receiverUpiId     String?

  senderUser        User?           @relation(name: "SenderUserRelation", fields: [senderUserId], references: [id], onDelete: SetNull)
  receiverUser      User?           @relation(name: "ReceiverUserRelation", fields: [receiverUserId], references: [id], onDelete: SetNull)
}

enum AuthType {
  Google
  Github
}

// todo: change to TransactionStatus
// enum TransactionStatus {
//   SUCCESS
//   FAILURE
//   PROCESSING
// }
enum OnRampStatus {
  Success
  Failure
  Processing
}