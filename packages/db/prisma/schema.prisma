// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(cuid())  @db.VarChar(30)
  email               String          @unique
  emailVerified       DateTime?
  name                String         
  phoneNumber         String?         @unique
  password            String?
  image               String?
  role                UserRole        @default(USER)
  isTwoFactorEnabled  Boolean         @default(false)
  isTwoFactorConfirmation Boolean?
  upiId               String?         @unique
  walletPin           String?           
  walletPinAttempts   Int             @default(0)
  walletLockUntil     DateTime?        

  bankAccount         BankAccount?
  walletBalance       WalletBalance?

  accounts            Account[]
  OnRampTransaction   OnRampTransaction[]

  sentTransfer        P2pTransaction[]   @relation(name: "SenderUserRelation")
  receiveTransfer     P2pTransaction[]   @relation(name: "ReceiverUserRelation")

  sentBankTransfers     B2bTransaction[]   @relation("SenderBankRelation")
  receivedBankTransfers B2bTransaction[]   @relation("ReceiverBankRelation")

}

model Account {
  id                  String          @id @default(cuid())  @db.VarChar(30)
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?         @db.Text
  access_token        String?         @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?         @db.Text
  session_state       String?
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken{
  id                  String          @id @default(cuid())  @db.VarChar(30)
  email               String
  name                String?
  hashedPassword      String?
  token               String          @unique
  expires             DateTime
  updateEmailId       String?  

  @@unique([email, token])
}

model PasswordResetToken{
  id                  String          @id @default(cuid()) @db.VarChar(30)
  email               String
  token               String          @unique
  expires             DateTime

  @@unique([email, token])
}

model TwoFactorCode{
  id                  String          @id @default(cuid()) @db.VarChar(30)
  email               String
  code                String          @unique
  expires             DateTime

  @@unique([email, code])
}

model Merchant {
  id                  String          @id @default(cuid()) @db.VarChar(30)
  email               String          @unique
  name                String?
  auth_type           AuthType   
}

model OnRampTransaction {
  id                  String          @id @default(uuid())
  userId              String   
  token               String          @unique
  provider            Bank    
  amount              Int   
  startTime           DateTime    
  status              TransactionStatus    
  
  user                User            @relation(fields: [userId], references: [id])
}

model WalletBalance {
  id              String    @id @default(cuid())
  userId          String    @unique
  balance         Int       
  locked          Int       
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BankAccount {
  id              String    @id @default(cuid())
  userId          String    @unique  
  phoneNumber     String    @unique  
  bankName        Bank
  accountNumber   String    @unique
  balance         Int       
  
  // Optional debit card details
  cardNumber      String?   @unique
  cardExpiryMonth Int?
  cardExpiryYear  Int?
  cardPinHash     String?  
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([accountNumber])
}

model P2pTransaction {
  id                  String          @id @default(uuid())
  amount              Int
  timestamp           DateTime        @default(now())
  status              TransactionStatus

  webhookId           String?         @unique
  webhookStatus       WebhookStatus?
  webhookAttempts     Int             @default(0)
  lastWebhookAttempt  DateTime?

  senderUserId        String?
  receiverUserId      String?

  senderIdentifier    String?
  receiverIdentifier  String?
  transferMethod      TransferMethod

  initiatedFromIp    String?  // FOR SECURITY AUDIT: not sure to use
  userAgent          String?

  senderUser          User?           @relation(name: "SenderUserRelation", fields: [senderUserId], references: [id], onDelete: SetNull)
  receiverUser        User?           @relation(name: "ReceiverUserRelation", fields: [receiverUserId], references: [id], onDelete: SetNull)

  @@index([senderUserId])
  @@index([receiverUserId])
  @@index([webhookId])
}

model B2bTransaction {
  id                 String            @id @default(uuid())
  amount             Int               
  timestamp          DateTime          @default(now())
  status             TransactionStatus

  webhookId          String?          @unique  // To track webhook processing
  webhookStatus      WebhookStatus?
  webhookAttempts    Int              @default(0)
  lastWebhookAttempt DateTime?
  
  senderUserId       String?
  receiverUserId     String?
  
  senderAccountNumber    String?     
  receiverAccountNumber  String?     
  
  senderBankName        String
  receiverBankName      String
  
  
  senderUser         User?     @relation("SenderBankRelation", fields: [senderUserId], references: [id], onDelete: SetNull)
  receiverUser       User?     @relation("ReceiverBankRelation", fields: [receiverUserId], references: [id], onDelete: SetNull)
  
  @@index([senderUserId])
  @@index([receiverUserId])
  @@index([webhookId])
}

enum AuthType {
  google
  github
}

enum TransactionStatus {
  SUCCESS
  FAILURE
  PROCESSING
}

enum WebhookStatus {
  PENDING
  SENT
  FAILED
  COMPLETED
}

enum TransferMethod {
  UPI
  PHONE
}

enum UserRole {
  ADMIN
  USER
}

enum Bank {
  HDFC
  AXIS
}